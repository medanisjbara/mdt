#!/bin/sh
# https://github.com/basilioss/mdt

# Configuration ################################

dir="${MDT_DIR}"
inbox="${MDT_INBOX}"
add_multiple_tasks="${MDT_ADD_MULTIPLE_TASKS:-0}"
unite_tasks="${MDT_UNITE_TASKS:-0}"
display_titles="${MDT_DISPLAY_TITLES:-0}"
todo_filename="${MDT_NEW_FILE_NAMES}"
color="${MDT_MAIN_COLOR:-5}"
prompt="${MDT_PROMPT:-◆}"
cursor="${MDT_CURSOR:-➔}"
input_width="${MDT_INPUT_WIDTH:-65}"
file_editor="${MDT_EDITOR:-${EDITOR}}"
checkbox_prefix="${MDT_CHECKBOX_PREFIX:--}"

################################################

me="${0##*/}"
mdt_version="1.4.0"

print_help() {
  printf %s "\
${me} - command-line markdown todo list manager

Usage
  ${me} [-d|--dir <arg>] [-i|--inbox <arg>] [-m|--add-multiple]
  [-u|--unite-tasks] [--color <arg>] [--prompt <arg>]
  [--cursor <arg>] [--item-width <arg>] [--input-width <arg>]
  [--editor <arg>] [-v|--version] [-h|--help]

Options
  -d, --dir               Path to the tasks directory
  -i, --inbox             Path to the inbox file
  -l, --list-inbox        Automatically select 'List inbox' option
  -a, --add-inbox         Automatically select 'Add inbox' option
  -e, --edit-inbox        Open inbox note in the editor
  -m, --add-multiple      Add multiple tasks
  -u, --unite-tasks       List all tasks in the file
  --display-titles        Display first heading instead of filename
  --todo-filename         Filename of the newly created files
  --color                 Main color
  --prompt                Input prompt character
  --cursor                Selection character
  --item-width            Todo items width
  --input-width           Input prompt width
  --editor                Markdown file editor
  -v, --version           Print version
  -h, --help              Print help
"
  exit 0
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "${_key}" in
      -d | --dir) dir="$2" && shift ;;
      --dir=*) dir="${_key##--dir=}" ;;
      -i | --inbox) inbox="$2" && shift ;;
      --inbox=*) inbox="${_key##--inbox=}" ;;
      -m | --add-multiple) add_multiple_tasks=1 ;;
      -u | --unite-tasks) unite_tasks=1 ;;
      -l | --list-inbox) choice="List inbox" ;;
      -a | --add-inbox) choice="Add inbox" ;;
      -e | --edit-inbox) set_inbox && edit_todo "${inbox}" && exit ;;
      --display-titles) display_titles=1 ;;
      --todo-filename) todo_filename="$2" && shift ;;
      --todo-filename=*) todo_filename="${_key##--todo-filename=}" ;;
      --color) color="$2" && shift ;;
      --color=*) color="${_key##--color=}" ;;
      --prompt) prompt="$2" && shift ;;
      --prompt=*) prompt="${_key##--prompt=}" ;;
      --cursor) cursor="$2" && shift ;;
      --cursor=*) cursor="${_key##--cursor=}" ;;
      --item-width) item_width="$2" && shift ;;
      --item-width=*) item_width="${_key##--item-width=}" ;;
      --input-width) input_width="$2" && shift ;;
      --input-width=*) input_width="${_key##--input-width=}" ;;
      --editor) file_editor="$2" && shift ;;
      --editor=*) file_editor="${_key##--editor=}" ;;
      -v | --version) printf "%s\n" "${me} ${mdt_version}" && exit ;;
      -h | --help) print_help ;;
      *) die "Got an unexpected argument '$1'" ;;
    esac
    shift
  done
}

die() {
  printf 'Error: %s.\n' "$1" >&2
  exit 1
}

gum_choose() {
  gum choose ${item_width:+--item.width=${item_width}} \
    --selected.foreground="${color}" \
    --cursor.foreground="${color}" \
    --cursor="${cursor} " "$@"
}

gum_input() {
  gum input --prompt="${prompt} " \
    --prompt.foreground="${color}" \
    --width="${input_width}" "$@"
}

create_file_if_missing() {
  _file="$1"
  _title="$2"
  _basename="$(basename "${_file}" .md)"

  [ -f "${_file}" ] && return

  gum confirm \
    --selected.background="${color}" \
    --selected.foreground="#262626" \
    --prompt.padding="0 2" \
    "File does not exist, create?"

  # Exit if the answer is "No"
  [ ! $? -eq 0 ] && exit

  if [ -n "${_title}" ]; then
    printf "%s\n\n" "# ${_title}" > "${_file}"
  else
    printf "%s\n\n" "# ${_basename}" > "${_file}"
  fi
}

# TODO: Speed up and refactor display_titles
get_file_with_checkboxes() {
  # If checkbox type isn't specified, use any
  # For example: [x] [ ] [-] [/] [>] [<] ...
  _checkbox_type="${1:-.}"
  _checkbox_pattern="^[[:space:]]*(-|\*|\+) \[${_checkbox_type}\]"
  _separator="@@@"

  # Do not search recursively if $dir isn't specified
  if [ "${isDirNotSpecified}" ]; then
    _files="$(ls -1 -t -- *.md | tr "\n" "\0" |
      xargs -0 grep -E --files-with-matches "${_checkbox_pattern}")"
  else
    _files="$(find * -name '*.md' -not -path '*/.*' \
      -exec ls -1 -t -- {} + | tr "\n" "\0" |
      xargs -0 grep -E --files-with-matches "${_checkbox_pattern}")"
  fi

  [ -z "${_files}" ] && die "No todo files found"

  if [ "${display_titles}" = true ] || [ "$display_titles" = 1 ]; then
    _titles_file=$(mktemp) # Create a temporary file
    printf "%s\n" "${_files}" | while read -r file; do
      title=$(sed -n '/^# .*/{p;q;}' "${file}" | sed 's/^# *//')
      [ -z "${title}" ] && title="${file}"
      printf "%s\n" "${title}${_separator}${file}" >> "${_titles_file}"
    done
    _files=$(cat "${_titles_file}")
    rm "${_titles_file}"
  fi

  _filename=$(printf "%s\n" "${_files}" | sed "s/${_separator}.*//g" |
    gum filter --no-strict \
      --indicator="${cursor}" \
      --prompt="${prompt} " \
      --indicator.foreground="${color}" \
      --match.foreground="${color}")

  [ -z "${_filename}" ] && exit

  if [ "${display_titles}" = true ] || [ "${display_titles}" = 1 ]; then
    _file="$(printf "%s\n" "${_files}" |
      awk -F "${_separator}" -v file="${_filename}" '$1 == file {print $2}')"
  fi

  [ -z "${_file}" ] && _file="${_filename}"

  # Remove .md file extensions if exist
  [ "${_file##*.}" = "md" ] && _file="${_file%.*}"

  [ -n "${_file}" ] && _file="${dir}/${_file}.md" || exit

  if [ -n "${todo_filename}" ]; then
    _title="${_filename}"
    [ ! -f "${_file}" ] && _file="${todo_filename}.md"
  fi

  # Create a new file only if checkbox type isn't specified because
  # we can't list tasks from a non-existent file that doesn't have them
  [ "${_checkbox_type}" = '.' ] && create_file_if_missing "${_file}" "${_title}"

  # Return path to the file
  [ -f "${_file}" ] && printf "%s\n" "${_file}"
}

get_header_with_tasks() {
  _headers="$(awk \
    '/^#/ { header = $0 } /^[-*+] \[.]/ { print header; header = "" }' \
    "${_file}" | grep --invert-match '^$')"

  if [ "$(printf "%s\n" "${_headers}" | wc -l)" -gt 1 ]; then
    _header="$(printf "%s\n" "${_headers}" | gum_choose)"
    [ -z "${_header}" ] && exit 1
  else
    _header="${_headers}"
  fi

  [ -z "${_header}" ] && grep "^#.*" "${_file}" | head -1
  printf "%s" "${_header}"
}

list_open_todos() {
  [ -f "$1" ] && _file="$1" || exit

  if ! grep -E --quiet --no-messages "(-|\*|\+) \[ \]" "${_file}"; then
    printf "%b\n" "Yey,\033[38;5;${color}m nothing\033[m left to do!" && exit
  fi

  if [ "${unite_tasks}" = true ] || [ "${unite_tasks}" = 1 ]; then
    _items="$(grep -E "(-|\*|\+) \[ \] " "${_file}")"
  else
    _items="$(awk -v header="$(get_header_with_tasks)" \
      '$0 ~ header {p=1; next} /^#/ {p=0} p && /[-*+] \[ ] / {print}' "${_file}")"
  fi

  if [ -n "${_items}" ]; then
    # Add "└─ " at the beginning for subtasks
    _selected_items="$(printf "%s\n" "${_items}" |
      sed 's/^ \{0,1\}[-*+] \[ \] //g' |
      sed 's/^[[:space:]]*[-*+] \[ \] /└─ /g' |
      gum_choose --no-limit \
        --cursor-prefix "[ ] " \
        --selected-prefix "[✓] " \
        --unselected-prefix "[ ] ")"
  fi

  [ -z "${_selected_items}" ] && exit

  printf "%s\n" "${_selected_items}" | while read -r item; do
    escaped_item=$(printf '%s\n' "${item}" |
      sed 's/└─ //g' |
      sed 's/[*[\/&]/\\&/g')
    sed "s/\[ \] ${escaped_item}/\[x\] ${escaped_item}/g" \
      "${_file}" > "${_file}.bak" && mv "${_file}.bak" "${_file}"
  done
}

add_todo() {
  [ -f "$1" ] && _file="$1" || exit
  _header="$(get_header_with_tasks)" || exit

  if [ "${add_multiple_tasks}" = true ] || [ "${add_multiple_tasks}" = 1 ]; then
    while true; do
      _input="$(gum_input --placeholder "Press Esc or Enter to exit")"
      [ -z "${_input}" ] && break || _items="${_items}\n${_input}"
    done
  else
    _items="$(gum_input --placeholder "Got something to do?")"
  fi

  [ -z "${_items}" ] && exit

  printf "%b\n" "${_items}" | while read -r _item; do
    [ -z "${_item}" ] && continue

    # Get line number of the first task under the header
    _line="$(awk -v header="${_header}" \
      '$0 ~ header {p=1; next} /^#/ {p=0} \
      p && /^[-*+] \[.]/ && !found {line=NR; found=1} \
      END {print line}' "${_file}")"

    # Add a checkbox before $_item if it isn't explicitly specified
    # Example checkboxes for inspiration:
    # https://minimal.guide/Block+types/Checklists#Checkbox+icons
    _checkbox="$(printf "%s\n" "${_item}" | grep --only-matching "^\[.\?\] ")"
    [ -z "${_checkbox}" ] && _item="[ ] ${_item}"

    if [ -z "${_line}" ]; then
      printf "%s\n" "${checkbox_prefix} ${_item}" >> "${_file}"
    else
      awk -v line="${_line}" -v todo="${checkbox_prefix} ${_item}" \
        'NR==line{print todo}1' \
        "${_file}" > "${_file}.bak" && mv "${_file}.bak" "${_file}"
    fi
  done
}

edit_todo() {
  [ -f "$1" ] && _file="$1" || exit
  [ -z "${file_editor}" ] && die "No editor specified"
  eval "${file_editor}" "\"${_file}\""
}

# If inbox isn't specified, use default.
# If it doesn't exist, ask to create.
set_inbox() {
  _default_inbox="${dir}/TODO.md"
  inbox="${inbox:-$_default_inbox}"

  if [ ! -f "${inbox}" ]; then
    create_file_if_missing "${inbox}"
    [ -f "${inbox}" ] && printf "%s\n" "${inbox} has been successfully created"
    exit 0
  fi
}

main() {
  command -v gum > /dev/null || die "gum is required but not installed, exiting"
  parse_commandline "$@"

  if [ -z "${dir}" ]; then
    dir="${PWD}"
    isDirNotSpecified=1
  else
    cd "${dir}" || die "Directory does not exist"
  fi

  if [ -z "${choice}" ]; then
    choice="$(gum_choose "List inbox" "Add inbox" "List" "Add" "Edit")"
  fi

  case "${choice}" in
    "List")
      list_open_todos "$(get_file_with_checkboxes ' ')"
      ;;
    "List inbox")
      set_inbox && list_open_todos "${inbox}"
      ;;
    "Add")
      add_todo "$(get_file_with_checkboxes)"
      ;;
    "Add inbox")
      set_inbox && add_todo "${inbox}"
      ;;
    "Edit")
      edit_todo "$(get_file_with_checkboxes)"
      ;;
  esac
}

main "$@"
